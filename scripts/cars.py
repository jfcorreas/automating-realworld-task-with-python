#!/usr/bin/env python

import os
import json
import locale
import sys
import reports
import emails

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  sales_by_model = {}
  sales_by_year = {}
  sales_by_made = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price

    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item

    # Also handle max sales
    item_model = format_car(item["car"])
    sales_by_model[item_model] = item["total_sales"]

    # Also handle most popular car_year
    item_year =  item["car"]["car_year"]
    if item_year in sales_by_year:
      sales_by_year[item_year] += item["total_sales"]
    else:
      sales_by_year[item_year] = item["total_sales"]

    # Collect sales by make
    item_make =  item["car"]["car_make"]
    if item_make in sales_by_made:
      sales_by_made[item_make] += item["total_sales"]
    else:
      sales_by_made[item_make] = item["total_sales"]

  sales_by_model_sorted = dict(sorted(sales_by_model.items(), key=lambda item: item[1], reverse=True))
  sales_by_year_sorted = dict(sorted(sales_by_year.items(), key=lambda item: item[1], reverse=True))
  sales_by_made_sorted = dict(sorted(sales_by_made.items(), key=lambda item: item[1], reverse=True))

  most_sales_model = list(sales_by_model_sorted.keys())[0]
  most_sales_year = list(sales_by_year_sorted.keys())[0]

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(
      most_sales_model, sales_by_model[most_sales_model]),
    "The most popular year was {} with {} sales.".format(
      most_sales_year, sales_by_year[most_sales_year])
  ]

  return summary, sales_by_made_sorted


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data

def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("data/car_sales.json")
  summary, sales_by_made = process_data(data)
  print(summary)

  # Turn this into a PDF report
  data_sorted = sorted(data, key=lambda item: item['total_sales'], reverse=True)
  
  reports.generate(
    "output/cars.pdf",
    "Sales summary for last month",
    "<br/>".join(summary),
    cars_dict_to_table(data_sorted),
    "Total Sales by car made (top ten)",
    {key:value for key,value in list(sales_by_made.items())[0:10]}
  )

# Send the PDF report as an email attachment

# sender = "automation@example.com"
# receiver = "{}@example.com".format(os.environ.get('USER'))
# subject = "Sales summary for last month"
# body = "\n".join(summary)
# message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
# emails.send(message)

if __name__ == "__main__":
    main(True)

# TODO: Create a pie chart for the total sales of each car made.
# TODO: Create a bar chart showing total sales for the top 10 best selling vehicles using the ReportLab Diagra library. Put the vehicle name on the X-axis and total revenue (remember, price * total sales!) along the Y-axis.